extends "package://schema.kdeps.com/core@latest#/Agent.pkl"

// Agent ID Resolution Template
//
// This template provides PKL-level agent ID resolution functionality.
// It replaces the regex-based parsing with a more reliable PKL-native approach.
//
// Usage Examples:
//
// 1. Resolve a local action ID to a fully qualified agent ID:
//    local resolvedID = "@(agent.resolve("actionName", agent="myAgent", version="1.0.0"))"
//    // Result: "@myAgent/actionName:1.0.0"
//
// 2. List all installed agents:
//    local agents = "@(agent.list())"
//    // Result: JSON array of installed agents
//
// 3. Register a new agent:
//    local result = "@(agent.register("@myAgent/action:1.0.0", path="/path/to/agent"))"
//
// 4. Unregister an agent:
//    local result = "@(agent.unregister("@myAgent/action:1.0.0"))"
//
// The agent resolver automatically tracks installed agents and provides
// namespace resolution during compilation and packaging.

// Agent configuration and metadata
agent {
    // Current agent information for context
    name = "{{.AgentName}}"
    version = "{{.AgentVersion}}"
    
    // Agent-specific settings
    settings {
        // Enable automatic ID resolution
        autoResolve = true
        
        // Default namespace for local action IDs
        defaultNamespace = "{{.AgentName}}"
        
        // Version management
        versionPolicy = "strict" // Options: "strict", "flexible", "latest"
        
        // Dependency resolution
        resolveDependencies = true
        
        // Package management
        autoPackage = true
    }
    
    // Agent capabilities and features
    capabilities {
        // ID resolution capabilities
        idResolution = true
        
        // Namespace management
        namespaceManagement = true
        
        // Dependency tracking
        dependencyTracking = true
        
        // Package management
        packageManagement = true
    }
    
    // Agent metadata
    metadata {
        description = "{{.AgentDescription}}"
        author = "{{.AgentAuthor}}"
        license = "{{.AgentLicense}}"
        repository = "{{.AgentRepository}}"
        tags = ["{{.AgentTags}}"]
    }
}

// Agent registry for tracking installed agents
registry {
    // Local agent registry
    local {
        // Automatically populated from installed agents
        agents = {}
    }
    
    // Remote agent registry (future feature)
    remote {
        enabled = false
        endpoint = ""
        authentication {
            type = "none"
            credentials = {}
        }
    }
}

// Agent resolution rules and policies
resolution {
    // ID resolution policies
    policies {
        // How to handle conflicts
        conflictResolution = "error" // Options: "error", "warn", "override"
        
        // Version resolution strategy
        versionStrategy = "exact" // Options: "exact", "semver", "latest"
        
        // Namespace fallback behavior
        namespaceFallback = "strict" // Options: "strict", "flexible", "auto"
    }
    
    // Resolution cache settings
    cache {
        enabled = true
        ttl = 3600 // seconds
        maxSize = 1000
    }
    
    // Validation rules
    validation {
        // ID format validation
        idFormat = true
        
        // Version format validation
        versionFormat = true
        
        // Namespace validation
        namespaceValidation = true
        
        // Dependency validation
        dependencyValidation = true
    }
}

// Agent packaging configuration
packaging {
    // Package generation settings
    generation {
        // Include agent metadata
        includeMetadata = true
        
        // Include dependencies
        includeDependencies = true
        
        // Include resources
        includeResources = true
        
        // Compression settings
        compression {
            enabled = true
            algorithm = "gzip"
            level = 6
        }
    }
    
    // Package distribution
    distribution {
        // Package format
        format = "tar.gz"
        
        // Package naming convention
        naming = "{{.AgentName}}-{{.AgentVersion}}.tar.gz"
        
        // Package signing
        signing {
            enabled = false
            keyPath = ""
            keyPassword = ""
        }
    }
}

// Agent dependency management
dependencies {
    // Dependency resolution
    resolution {
        // Automatic dependency resolution
        autoResolve = true
        
        // Dependency version constraints
        versionConstraints = true
        
        // Circular dependency detection
        circularDetection = true
        
        // Dependency conflict resolution
        conflictResolution = "error"
    }
    
    // Dependency tracking
    tracking {
        // Track direct dependencies
        direct = true
        
        // Track transitive dependencies
        transitive = true
        
        // Track dependency versions
        versions = true
        
        // Track dependency metadata
        metadata = true
    }
}

// Agent namespace management
namespaces {
    // Namespace configuration
    config {
        // Default namespace
        default = "{{.AgentName}}"
        
        // Namespace aliases
        aliases = {}
        
        // Namespace validation
        validation = true
    }
    
    // Namespace resolution
    resolution {
        // Automatic namespace resolution
        autoResolve = true
        
        // Namespace fallback
        fallback = "strict"
        
        // Namespace inheritance
        inheritance = true
    }
}

// Agent utilities and helper functions
utilities {
    // ID resolution utilities
    idResolution {
        // Resolve local ID to qualified ID
        resolve = "@(agent.resolve)"
        
        // Validate ID format
        validate = "@(agent.validate)"
        
        // Parse ID components
        parse = "@(agent.parse)"
        
        // Generate ID
        generate = "@(agent.generate)"
    }
    
    // Namespace utilities
    namespace {
        // Get current namespace
        current = "@(agent.namespace.current)"
        
        // Set namespace
        set = "@(agent.namespace.set)"
        
        // Validate namespace
        validate = "@(agent.namespace.validate)"
    }
    
    // Version utilities
    version {
        // Get current version
        current = "@(agent.version.current)"
        
        // Compare versions
        compare = "@(agent.version.compare)"
        
        // Validate version
        validate = "@(agent.version.validate)"
    }
}

// Agent lifecycle hooks
lifecycle {
    // Pre-resolution hooks
    preResolution {
        // Validate agent context
        validateContext = true
        
        // Prepare resolution environment
        prepareEnvironment = true
        
        // Load agent metadata
        loadMetadata = true
    }
    
    // Post-resolution hooks
    postResolution {
        // Update agent registry
        updateRegistry = true
        
        // Cache resolution results
        cacheResults = true
        
        // Log resolution activity
        logActivity = true
    }
    
    // Pre-packaging hooks
    prePackaging {
        // Validate agent state
        validateState = true
        
        // Prepare packaging environment
        prepareEnvironment = true
        
        // Collect dependencies
        collectDependencies = true
    }
    
    // Post-packaging hooks
    postPackaging {
        // Update package registry
        updateRegistry = true
        
        // Generate package metadata
        generateMetadata = true
        
        // Log packaging activity
        logActivity = true
    }
} 