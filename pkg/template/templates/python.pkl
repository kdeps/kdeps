{{ .Header }}

actionID = "pythonResource"
name = "Python Resource"
description = "This resource creates a python script session."
category = ""
requires {
        // Define the ID of any dependency resource that must be executed before this resource.
}
run {
        skipCondition {
                // Conditions under which the execution of this resource should be skipped.
                // If any evaluated condition returns true, the resource execution will be bypassed.
        }
        preflightCheck {
                validations {
                        // This section expects boolean validations.
                        // If any validation returns false, an exception will be thrown before proceeding to the next step.
                        //
                        // For example, this expects that the 'file.txt' is in the 'data' folder.
                        // All data files are mapped from 'data/file.txt' to 'data/<agentName>/<agentVersion>/file.txt'.
                        // read("file:/agent/workflow/data/%s/1.0.0/file.txt").text != "" && read("file:/agent/workflow/data/%s/1.0.0/file.txt").base64 != ""
                }
                // Custom error message and code to be used if the preflight check fails.
                error {
                        code = 500
                        message = "Data file file.txt not found!"
                }
        }

        // Initiates a shell session for executing commands within this resource. Any packages
        // defined in the workflow are accessible here.
        //
        // The exec resource provides the following helper functions:
        //
        // - "@(python.resource("ResourceID"))"
        // - "@(python.stderr("ResourceID"))"
        // - "@(python.stdout("ResourceID"))"
        // - "@(python.exitCode("ResourceID"))"
        //
        // To use these in your resource, you can define a local variable like this:
        //
        // local successExec = "@(python.exitCode("ResourceID"))"
        // You can then reference the value using "@(successExec)".
        //
        // If you need to access a file in your resource, you can use PKL's read("file") API like this:
        // "@(read("file"))".
        //
        // The "@(...)" syntax enables lazy evaluation, ensuring that values are
        // retrieved only after the result is ready.
        //
        // Note: Each resource is restricted to a single dedicated action. Combining multiple
        // actions within the same resource is not allowed.
        python {
                // Specifies the conda environment in which this Python script will execute, if Anaconda is
                // installed.
                condaEnvironment = "base"

                script =
"""
def main():
    print("Hello, World!")

if __name__ == "__main__":
    main()
"""
                env {
                        // Environment variables that would be accessible inside the shell
                        ["ENVVAR"] = "XYZ"  // Example ENVVAR.
                }
                // Timeout duration in seconds. This specifies when to terminate the shell exec.
                timeoutDuration = 60.s
        }
}
