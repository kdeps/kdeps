{{ .Header }}

actionID = "pythonResource"
name = "Python Resource"
description = "This resource creates a python script session."
category = ""
requires {
        // Define the ID of any dependency resource that must be executed before this resource.
}
run {
        // restrictToHTTPMethods specifies the HTTP methods required for the request.
        // If none are specified, all HTTP methods are permitted. This restriction is only
        // in effect when APIServerMode is enabled. If the request method is not in this list,
        // the action will be skipped.
        restrictToHTTPMethods {
            "GET"
        }

        // restrictToRoutes specifies the URL paths required for the request.
        // If none are specified, all routes are permitted. This restriction is only
        // in effect when APIServerMode is enabled. If the request path is not in this list,
        // the action will be skipped.
        restrictToRoutes {
            "/api/v1/whois"
        }

        // allowedHeaders specifies the permitted HTTP headers for the request.
        // If none are specified, all headers are allowed. This restriction is only
        // in effect when APIServerMode is enabled.
        allowedHeaders {
            // "X-API-KEY"
        }

        // allowedParams specifies the permitted query parameters for the request.
        // If none are specified, all parameters are allowed. This restriction is only
        // in effect when APIServerMode is enabled.
        allowedParams {}

        skipCondition {
                // Conditions under which the execution of this resource should be skipped.
                // If any evaluated condition returns true, the resource execution will be bypassed.
        }

        preflightCheck {
                validations {
                        // This section expects boolean validations.
                        // If any validation returns false, an exception will be thrown before proceeding to the next step.
                        //
                        // For example, this expects that the 'file.txt' is in the 'data' folder.
                        // All data files are mapped from 'data/file.txt' to 'data/<agentName>/<agentVersion>/file.txt'.
                        // read("file:/agent/workflow/data/%s/1.0.0/file.txt").text != "" && read("file:/agent/workflow/data/%s/1.0.0/file.txt").base64 != ""
                }
                //
                // Custom error message and code to be returned immediately if the preflight check fails.
                //
                // error {
                //         code = 0
                //         message = ""
                // }
        }

        // The expr block is space for evaluating standard PKL expressions. It is primarily used to execute
        // expressions that produce side effects, such as updating resources or triggering actions, but also supports
        // general-purpose evaluation of any valid PKL expression, making it a place for inline logic and
        // scripting within a configuration.
        expr {
                // "@(memory.setRecord("foo", "bar"))" // Persistent data
                // "@(memory.clear())"
                // "@(session.setRecord("foo", "bar"))" // Temporary data only for this request
        }

        // Initiates a Python script session for this resource. Any packages
        // defined in the workflow are accessible here.
        //
        // The Python resource provides the following helper functions for accessing SQLite-stored resources:
        //
        // New SQLite-based resource access (recommended):
        // - "@(read("resource://python/ResourceID").script)"       // Get Python script
        // - "@(read("resource://python/ResourceID").stdout)"       // Get Python stdout
        // - "@(read("resource://python/ResourceID").stderr)"       // Get Python stderr  
        // - "@(read("resource://python/ResourceID").env)"          // Get environment variables
        // - "@(read("resource://python/ResourceID").file)"         // Get associated file path
        // - "@(read("resource://exec/ResourceID").stdout)"         // Get exec stdout
        // - "@(read("resource://exec/ResourceID").command)"        // Get exec command
        // - "@(read("resource://http/ResourceID").response.body)"  // Get HTTP response body
        // - "@(read("resource://http/ResourceID").response.headers)" // Get HTTP response headers
        // - "@(read("resource://llm/ResourceID").response)"        // Get LLM response
        // - "@(read("resource://llm/ResourceID").prompt)"          // Get LLM prompt
        // - "@(read("resource://data/ResourceID").files)"          // Get data files mapping
        //
        // List all resources of a type:
        // - "@(read("resource://python/_?op=list"))"               // List all python resources
        // - "@(read("resource://exec/_?op=list"))"                 // List all exec resources
        // - "@(read("resource://http/_?op=list"))"                 // List all http resources
        // - "@(read("resource://llm/_?op=list"))"                  // List all llm resources
        // - "@(read("resource://data/_?op=list"))"                 // List all data resources
        //
        // Delete specific resources:
        // - "@(read("resource://python/ResourceID?op=delete"))"    // Delete specific python resource
        // - "@(read("resource://exec/_?op=clear"))"                // Clear all exec resources
        //
        // Legacy file-based helper functions (deprecated, use SQLite resource access above):
        // - "@(python.resource("ResourceID"))"
        // - "@(python.stderr("ResourceID"))"
        // - "@(python.stdout("ResourceID"))"
        // - "@(python.exitCode("ResourceID"))"
        //
        // To use these in your resource, you can define a local variable like this:
        //
        // local previousOutput = "@(read("resource://python/previousPythonResource").stdout)"
        // You can then reference the value using "@(previousOutput)".
        //
        // If you need to access a file in your resource, you can use PKL's read("file") API like this:
        // "@(read("file"))".
        //
        // The "@(...)" syntax enables lazy evaluation, ensuring that values are
        // retrieved only after the result is ready.
        //
        // Note: Each resource is restricted to a single dedicated action. Combining multiple
        // actions within the same resource is not allowed.
        python {
                // Specifies the conda environment in which this Python script will execute, if Anaconda is
                // installed.
                condaEnvironment = "base"

                script =
"""
def main():
    print("Hello, World!")

if __name__ == "__main__":
    main()
"""
                env {
                        // Environment variables that would be accessible inside the shell
                        ["ENVVAR"] = "XYZ"  // Example ENVVAR.
                        // Example: Reference output from previous resource
                        // ["PREV_RESULT"] = "@(read("resource://exec/previousCommand").stdout)"
                        // ["API_DATA"] = "@(read("resource://http/apiCall").response.body)"
                }
                // Timeout duration in seconds. This specifies when to terminate the shell exec.
                timeoutDuration = 60.s
        }
}
