name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]

permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set PROJECT_NAME
        run: echo "PROJECT_NAME=kdeps" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22

      - name: Set commits environment variable
        run: |
          echo "commits=$(git log --pretty=oneline | wc -l)" >> $GITHUB_ENV

      - name: Determine next version
        id: determine_version
        run: |
          CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo 0.1.0)
          CURRENT_VERSION="${CURRENT_TAG#release/}"
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          if [[ -n "${{ env.commits }}" ]]; then
            patch=$((patch + 1))
          fi

          NEXT_VERSION="${major}.${minor}.${patch}"
          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_ENV

      # - name: Run tests
      #   run: make test

      - name: Run build
        run: make build

      - name: Package binaries
        run: |
          platforms=(
            "darwin/amd64"
            "darwin/arm64"
            "linux/amd64"
            "linux/arm64"
            "windows/amd64"
            "windows/arm64"
          )

          for platform in "${platforms[@]}"; do
            GOOS=${platform%/*}
            GOARCH=${platform#*/}
            file_ext=".tar.gz"
            binary_ext=""
            if [ "$GOOS" = "windows" ]; then
              binary_ext=".exe"
              file_ext=".zip"
            fi
            if [ -f "./build/${GOOS}/${GOARCH}/${{ env.PROJECT_NAME }}${binary_ext}" ]; then
              PACKAGE_NAME="${{ env.PROJECT_NAME }}_${{ env.NEXT_VERSION }}_${GOOS}_${GOARCH}${file_ext}"
              tar -czvf "$PACKAGE_NAME" -C ./build ./${GOOS}/${GOARCH}/
            else
              echo "Skipping packaging for ./${GOOS}/${GOARCH}/${{ env.PROJECT_NAME }}${binary_ext} as the binary does not exist."
            fi
          done
        working-directory: ${{ github.workspace }}

      - name: Create release
        if: github.event.action == 'closed' && github.event.pull_request.merged == true
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "release/${{ env.NEXT_VERSION }}"
          name: "Release ${{ env.NEXT_VERSION }} (${{ env.RELEASE_DATE }})"
          files: |
              ./*.tar.gz
              ./*.zip
