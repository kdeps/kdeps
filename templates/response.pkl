{{ .Header }}

ActionID = "responseResource"
Name = "Response Resource"
Description = "This resource creates a response."
Category = ""
Requires {
        // Define the ID of any dependency resource that must be executed before this resource.
        // These resources will be executed in order before this response resource
        "clientResource"
        "execResource" 
        "pythonResource"
        "llmResource"
}

Run {
        // RestrictToHTTPMethods specifies the HTTP methods required for the request.
        // If none are specified, all HTTP methods are permitted. This restriction is only
        // in effect when APIServerMode is enabled. If the request method is not in this list,
        // the action will be skipped.
        RestrictToHTTPMethods {
            "GET"
        }

        // RestrictToRoutes specifies the URL paths required for the request.
        // If none are specified, all routes are permitted. This restriction is only
        // in effect when APIServerMode is enabled. If the request path is not in this list,
        // the action will be skipped.
        RestrictToRoutes {
            "/api/v1/whois"
        }

        // AllowedHeaders specifies the permitted HTTP headers for the request.
        // If none are specified, all headers are allowed. This restriction is only
        // in effect when APIServerMode is enabled.
        AllowedHeaders {
            // "X-API-KEY"
        }

        // AllowedParams specifies the permitted query parameters for the request.
        // If none are specified, all parameters are allowed. This restriction is only
        // in effect when APIServerMode is enabled.
        AllowedParams {}

        SkipCondition {
                // Conditions under which the execution of this resource should be skipped.
                // If any evaluated condition returns true, the resource execution will be bypassed.
        }

        PreflightCheck {
                Validations {
                        // This section expects boolean validations.
                        // If any validation returns false, an exception will be thrown before proceeding to the next step.
                        //
                        // For example, to ensure that data is present in the request (e.g., request parameters, file uploads).
                        // request.filecount() > 0 && request.params("q") != ""
                }
                //
                // Custom error message and code to be returned immediately if the preflight check fails.
                //
                // Error {
                //         Code = 0
                //         Message = ""
                // }
                //
                // Boolean flag to enable or disable retry functionality for the validation check.
                // Default is false.
                Retry = false
                //
                // The number of times to retry the validation check before considering it a failure.
                // This property is only used when Retry is set to true. Default value is 3 retry attempts.
                RetryTimes = 3
        }

        PostflightCheck {
                Validations {
                        // This section expects boolean validations.
                        // If any validation returns false, an exception will be thrown after executing the action.
                }
                //
                // Custom error message and code to be returned if the postflight check fails.
                //
                // Error {
                //         Code = 0
                //         Message = ""
                // }
                //
                // Boolean flag to enable or disable retry functionality for the validation check.
                // Default is false.
                Retry = false
                //
                // The number of times to retry the validation check before considering it a failure.
                // This property is only used when Retry is set to true. Default value is 3 retry attempts.
                RetryTimes = 3
        }

        // The Expr block is space for evaluating standard PKL expressions. It is primarily used to execute
        // expressions that produce side effects, such as updating resources or triggering actions, but also supports
        // general-purpose evaluation of any valid PKL expression, making it a place for inline logic and
        // scripting within a configuration.
        Expr {
                // memory.setRecord("foo", "bar") // Persistent data
                // memory.clear()
                // session.setRecord("foo", "bar") // Temporary data only for this request
        }

        // Initializes an api response for this agent.
        //
        // This resource action is straightforward. It
        // creates a JSON response with the following shape
        //
        // {
        //   "success": true,
        //   "response": {
        //     "data": [],
        //   },
        //   "meta": {
        //     "requestID": "UUID-XXXX-XXXX-XXXX",
        //     "headers": [],
        //     "properties": [],
        //   },
        //   "errors": [{
        //     "code": 0,
        //     "message": ""
        //   }]
        // }
        //
        APIResponse {
                Success = true
                Meta {
                        Headers {
                                // ["X-Frame-Options"] = "DENY"
                                // ["Content-Security-Policy"] = "default-src 'self'; connect-src *; font-src *; script-src-elem * 'unsafe-inline'; img-src * data:; style-src * 'unsafe-inline';"
                                // ["X-XSS-Protection"] = "1; mode=block"
                                // ["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains; preload"
                                // ["Referrer-Policy"] = "strict-origin"
                                // ["X-Content-Type-Options"] = "nosniff"
                                // ["Permissions-Policy"] = "geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()"
                        }
                        Properties {
                                // ["X-Custom-Properties"] = "value"
                        }
                }
                Response {
                        Data {
                                // Basic response showing the workflow is working
                                "Agent processed query successfully"
                        }
                }
                Errors {
                        // new {
                        //         Code = 0
                        //         Message = ""
                        // }
                }
        }
}
