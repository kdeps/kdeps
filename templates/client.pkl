{{ .Header }}

ActionID = "httpResource"
Name = "HTTP Client Resource"
Description = "This resource allows for making API requests using an HTTP client."
Category = ""

Requires {
        // Define the ID of any dependency resource that must be executed before this resource.
        // Example: "llmResource"
}

Items {
        // Items iteration enables a resource to process a sequence of items in a loop, by specifying a set of values
        // to iterate over, which can be accessed using item.current(), item.prev(), and item.next() within the
        // resource's Run block.
        // "item1"
        // "item2"
        // "item3"
}

Run {
        // restrictToHTTPMethods specifies the HTTP methods required for the request.
        // If none are specified, all HTTP methods are permitted. This restriction is only
        // in effect when APIServerMode is enabled. If the request method is not in this list,
        // the action will be skipped.
        RestrictToHTTPMethods {
            "GET"
            // "POST"
            // "PUT"
            // "DELETE"
        }

        // restrictToRoutes specifies the URL paths required for the request.
        // If none are specified, all routes are permitted. This restriction is only
        // in effect when APIServerMode is enabled. If the request path is not in this list,
        // the action will be skipped.
        RestrictToRoutes {
            "/api/v1/whois"
            // "/api/v1/users"
            // "/api/v1/data"
        }

        // allowedHeaders specifies the permitted HTTP headers for the request.
        // If none are specified, all headers are allowed. This restriction is only
        // in effect when APIServerMode is enabled.
        AllowedHeaders {
            "X-API-KEY"
            "Authorization"
            "Content-Type"
        }

        // allowedParams specifies the permitted query parameters for the request.
        // If none are specified, all parameters are allowed. This restriction is only
        // in effect when APIServerMode is enabled.
        AllowedParams {
            "q"
            "limit"
            "offset"
        }

        SkipCondition {
                // Conditions under which the execution of this resource should be skipped.
                // If any evaluated condition returns true, the resource execution will be bypassed.
                // "@(request.method)" != "GET"
                // "@(request.path)" != "/api/v1/whois"
        }

        PreflightCheck {
                Validations {
                        // This section expects boolean validations.
                        // If any validation returns false, an exception will be thrown before proceeding to the next step.
                        // "@(request.header("X-API-KEY"))" != ""
                        // "@(request.params("q"))" != ""
                }
                //
                // Custom error message and code to be returned immediately if the preflight check fails.
                //
                // Error {
                //         Code = 401
                //         Message = "API key is required"
                // }
        }

        // The expr block is space for evaluating standard PKL expressions. It is primarily used to execute
        // expressions that produce side effects, such as updating resources or triggering actions, but also supports
        // general-purpose evaluation of any valid PKL expression, making it a place for inline logic and
        // scripting within a configuration.
        Expr {
                // "@(memory.setRecord("api_key", "@(request.header("X-API-KEY"))"))" // Store API key
                // "@(session.setRecord("request_id", "@(request.params("id"))"))" // Store request ID
        }

        // Initiates an HTTP client request for this resource.
        //
        // The HTTP resource provides the following helper functions:
        //
        // - "@(client.resource("ResourceID"))"
        // - "@(client.responseBody("ResourceID"))"
        // - "@(client.responseHeader("ResourceID", "HEADER"))"
        //
        // For example, to use these in your resource, you can define a local variable like this:
        //
        // local bearerToken = "@(client.responseHeader("ResourceID", "Bearer"))"
        // You can then access the value using "@(bearerToken)".
        //
        // The "@(...)" syntax enables lazy evaluation, ensuring that values are
        // retrieved only after the result is ready.
        //
        // Note: Each resource is restricted to a single dedicated action. Combining multiple
        // actions within the same resource is not allowed.
        HTTPClient {
                Method = "GET"  // Specifies the HTTP method to be used for the request.
                // Method = "POST"
                // Method = "PUT"
                // Method = "DELETE"
                
                Url = "https://api.example.com/data"        // The URL endpoint for the HTTP request.
                // Url = "https://jsonplaceholder.typicode.com/posts/1"
                // Url = "https://httpbin.org/get"
                
                Data {
                        // Any data that will be sent with the HTTP request.
                        // ["key"] = "value"
                        // ["user_id"] = """
                        //         @(request.params("user_id"))
                        // """
                        // ["query"] = """
                        //         @(request.params("q"))
                        // """
                }
                
                Headers {
                        // Headers to be included in the HTTP request.
                        ["X-API-KEY"] = """
                                @(request.header("X-API-KEY"))
                        """
                        ["Authorization"] = """
                                Bearer @(request.header("Authorization"))
                        """
                        ["Content-Type"] = "application/json"
                        ["User-Agent"] = "KDeps-HTTP-Client/1.0"
                }
                
                // Timeout duration in seconds. This specifies when to terminate the request.
                TimeoutDuration = 60.s
                // TimeoutDuration = 30.s
                // TimeoutDuration = 120.s
        }
}
