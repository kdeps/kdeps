# syntax=docker.io/docker/dockerfile:1
FROM ollama/ollama:{{ .ImageVersion }}

ENV SCHEMA_VERSION={{ .SchemaVersion }}
ENV OLLAMA_HOST={{ .HostIP }}:{{ .OllamaPortNum }}
ENV KDEPS_HOST={{ .KdepsHost }}
ENV DOCKER_MODE=1
ENV DEBUG=1

{{ if .EnvsSection }}{{ .EnvsSection }}{{ end }}

{{ if .ArgsSection }}{{ .ArgsSection }}{{ end }}

COPY cache /cache
RUN chmod +x /cache/pkl*

ARG DEBIAN_FRONTEND=noninteractive
ENV TZ={{ .Timezone }}

# Install necessary tools
RUN apt-get update --fix-missing && apt-get install -y --no-install-recommends \
    bzip2 ca-certificates git subversion mercurial libglib2.0-0 \
    libsm6 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxinerama1 libxrandr2 libxrender1 \
    gpg-agent openssh-client procps software-properties-common wget curl nano jq python3 python3-pip musl musl-dev \
    rsync musl-tools

# Determine the architecture and download the appropriate pkl binary
RUN arch=$(uname -m) && \
    if [ "$arch" = "x86_64" ]; then \
	cp /cache/pkl-linux-{{ .PklVersion }}-amd64 /usr/bin/pkl; \
    elif [ "$arch" = "aarch64" ]; then \
	cp /cache/pkl-linux-{{ .PklVersion }}-aarch64 /usr/bin/pkl; \
    else \
	echo "Unsupported architecture: $arch" && exit 1; \
    fi

{{ if .PkgSection }}{{ .PkgSection }}{{ end }}

# Setup kdeps
{{ if .DevBuildMode }}
RUN cp /cache/kdeps /bin/kdeps
RUN chmod a+x /bin/kdeps
{{ else }}
RUN curl -LsSf https://raw.githubusercontent.com/kdeps/kdeps/refs/heads/main/install.sh | sh -s -- -b /bin/ -d "{{ .KdepsVersion }}"
{{ end }}

COPY workflow /agent/project
COPY workflow /agent/workflow

{{ if .InstallAnaconda }}
RUN chmod +x /cache/anaconda*
RUN arch=$(uname -m) && if [ "$arch" = "x86_64" ]; then \
	cp /cache/anaconda-linux-{{ .AnacondaVersion }}-x86_64.sh /tmp/anaconda.sh; \
    elif [ "$arch" = "aarch64" ]; then \
	cp /cache/anaconda-linux-{{ .AnacondaVersion }}-aarch64.sh /tmp/anaconda.sh; \
    else \
	echo "Unsupported architecture: $arch" && exit 1; \
    fi

RUN /bin/bash /tmp/anaconda.sh -b -p /opt/conda
RUN ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh
RUN find /opt/conda/ -follow -type f -name '*.a' -delete
RUN find /opt/conda/ -follow -type f -name '*.js.map' -delete
RUN /opt/conda/bin/conda clean -afy
RUN rm /tmp/anaconda.sh
RUN . /opt/conda/etc/profile.d/conda.sh && conda activate base

RUN echo "export PATH=/opt/conda/bin:$PATH" >> /etc/environment
ENV PATH="/opt/conda/bin:$PATH"

{{ if .CondaPkgSection }}{{ .CondaPkgSection }}{{ end }}
{{ end }}

{{ if .PythonPkgSection }}{{ .PythonPkgSection }}{{ end }}

# Pull models during build time for faster startup and offline readiness
# Store models under /models (baked into the image). Runtime will sync them into OLLAMA_MODELS when OfflineMode=true.
RUN mkdir -p /models && \
    (OLLAMA_HOST=127.0.0.1 OLLAMA_MODELS=/models ollama serve &) && \
    sleep 10 && \{{ range $i, $model := .Models }}{{ if $i }} && \{{ end }}
    OLLAMA_HOST=127.0.0.1 OLLAMA_MODELS=/models ollama pull {{ $model }}{{ end }} && \
    pkill -f ollama && \
    sleep 2

RUN apt-get clean && rm -rf /var/lib/apt/lists/*
RUN rm -rf /cache

{{ if .ApiServerMode }}EXPOSE {{ .ExposedPort }}{{ end }}

ENTRYPOINT ["/bin/kdeps"] 