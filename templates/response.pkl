{{ .Header }}

actionID = "responseResource"
name = "Response Resource"
description = "This resource handles API response processing and data formatting."
category = ""

// Define the ID of any dependency resource that must be executed before this resource.
// For example "aiChatResource1"
requires {
        "llmResource"
        // "pythonResource"
        // "execResource"
        // "httpResource"
}

run {
        // restrictToHTTPMethods specifies the HTTP methods required for the request.
        // If none are specified, all HTTP methods are permitted. This restriction is only
        // in effect when APIServerMode is enabled. If the request method is not in this list,
        // the action will be skipped.
        restrictToHTTPMethods {
            "GET"
            "POST"
        }

        // restrictToRoutes specifies the URL paths required for the request.
        // If none are specified, all routes are permitted. This restriction is only
        // in effect when APIServerMode is enabled. If the request path is not in this list,
        // the action will be skipped.
        restrictToRoutes {
            "/api/v1/process"
        }

        // allowedHeaders specifies the permitted HTTP headers for the request.
        // If none are specified, all headers are allowed. This restriction is only
        // in effect when APIServerMode is enabled.
        allowedHeaders {
            // "Authorization"
        }

        // allowedParams specifies the permitted query parameters for the request.
        // If none are specified, all parameters are allowed. This restriction is only
        // in effect when APIServerMode is enabled.
        allowedParams {}

        skipCondition {
                // Conditions under which the execution of this resource should be skipped.
                // If any evaluated condition returns true, the resource execution will be bypassed.
        }

        preflightCheck {
                validations {
                        // This section expects boolean validations.
                        // If any validation returns false, an exception will be thrown before proceeding to the next step.
                }
                //
                // Custom error message and code to be returned immediately if the preflight check fails.
                //
                // error {
                //         code = 0
                //         message = ""
                // }
        }

        // The expr block is space for evaluating standard PKL expressions. It is primarily used to execute
        // expressions that produce side effects, such as updating resources or triggering actions, but also supports
        // general-purpose evaluation of any valid PKL expression, making it a place for inline logic and
        // scripting within a configuration.
        expr {
                // "@(memory.setRecord("foo", "bar"))" // Persistent data
                // "@(memory.clear())"
                // "@(session.setRecord("foo", "bar"))" // Temporary data only for this request
        }

        // Response processing and data aggregation using SQLite-stored resources.
        //
        // The response resource provides comprehensive access to all SQLite-stored resources:
        //
        // SQLite-based resource access (recommended):
        // - "@(read("resource://exec/ResourceID").stdout)"         // Get exec stdout
        // - "@(read("resource://exec/ResourceID").stderr)"         // Get exec stderr  
        // - "@(read("resource://exec/ResourceID").command)"        // Get exec command
        // - "@(read("resource://python/ResourceID").script)"       // Get Python script
        // - "@(read("resource://python/ResourceID").stdout)"       // Get Python stdout
        // - "@(read("resource://python/ResourceID").stderr)"       // Get Python stderr
        // - "@(read("resource://http/ResourceID").response.body)"  // Get HTTP response body
        // - "@(read("resource://http/ResourceID").response.headers)" // Get HTTP response headers
        // - "@(read("resource://http/ResourceID").method)"         // Get HTTP method
        // - "@(read("resource://http/ResourceID").url)"            // Get HTTP URL
        // - "@(read("resource://llm/ResourceID").response)"        // Get LLM response
        // - "@(read("resource://llm/ResourceID").prompt)"          // Get LLM prompt
        // - "@(read("resource://llm/ResourceID").model)"           // Get LLM model
        // - "@(read("resource://data/ResourceID").files)"          // Get data files mapping
        //
        // List all resources of a type:
        // - "@(read("resource://exec/_?op=list"))"                 // List all exec resources
        // - "@(read("resource://python/_?op=list"))"               // List all python resources
        // - "@(read("resource://http/_?op=list"))"                 // List all http resources
        // - "@(read("resource://llm/_?op=list"))"                  // List all llm resources
        // - "@(read("resource://data/_?op=list"))"                 // List all data resources
        //
        // Delete specific resources:
        // - "@(read("resource://exec/ResourceID?op=delete"))"      // Delete specific exec resource
        // - "@(read("resource://python/_?op=clear"))"              // Clear all python resources
        //
        // Example usage for response aggregation:
        // local apiData = "@(read("resource://http/apiCall").response.body)"
        // local processedData = "@(read("resource://python/dataProcessor").stdout)"
        // local llmSummary = "@(read("resource://llm/summarizer").response)"
        //
        // You can then use these variables in your response:
        // - response.data = "@(apiData)"
        // - response.summary = "@(llmSummary)"
        // - response.processed = "@(processedData)"
        //
        // The "@(...)" syntax enables lazy evaluation, ensuring that values are
        // retrieved only after the result is ready.
        //
        // Note: Each resource is restricted to a single dedicated action. Combining multiple
        // actions within the same resource is not allowed.
        
        // Example response structure
        response {
                success = true
                data {
                        // Example aggregating data from multiple sources
                        // api_result = "@(read("resource://http/apiCall").response.body)"
                        // processed_output = "@(read("resource://python/dataProcessor").stdout)"
                        // ai_summary = "@(read("resource://llm/summarizer").response)"
                }
                meta {
                        timestamp = "@(utils.timestamp())"
                        request_id = "@(request.id())"
                }
        }
}
