{{ .Header }}

ActionID = "execResource"
Name = "Exec Resource"
Description = "This resource creates a shell session."
Category = ""
Requires {
        // Define the ID of any dependency resource that must be executed before this resource.
        // For example "@aiChatResource1"
}
Run {
        // RestrictToHTTPMethods specifies the HTTP methods required for the request.
        // If none are specified, all HTTP methods are permitted. This restriction is only
        // in effect when APIServerMode is enabled. If the request method is not in this list,
        // the action will be skipped.
        RestrictToHTTPMethods {
            "GET"
        }

        // RestrictToRoutes specifies the URL paths required for the request.
        // If none are specified, all routes are permitted. This restriction is only
        // in effect when APIServerMode is enabled. If the request path is not in this list,
        // the action will be skipped.
        RestrictToRoutes {
            "/api/v1/whois"
        }

        // AllowedHeaders specifies the permitted HTTP headers for the request.
        // If none are specified, all headers are allowed. This restriction is only
        // in effect when APIServerMode is enabled.
        AllowedHeaders {
            // "X-API-KEY"
        }

        // AllowedParams specifies the permitted query parameters for the request.
        // If none are specified, all parameters are allowed. This restriction is only
        // in effect when APIServerMode is enabled.
        AllowedParams {}

        SkipCondition {
                // Conditions under which the execution of this resource should be skipped.
                // If any evaluated condition returns true, the resource execution will be bypassed.
        }

        PreflightCheck {
                Validations {
                        // This section expects boolean validations.
                        // If any validation returns false, an exception will be thrown before proceeding to the next step.
                        //
                        // For example, this expects that the 'file.txt' is in the 'data' folder.
                        // All data files are mapped from 'data/file.txt' to 'data/<agentName>/<agentVersion>/file.txt'.
                        // read("file:/agent/workflow/data/%s/1.0.0/file.txt").text != "" && read("file:/agent/workflow/data/%s/1.0.0/file.txt").base64 != ""
                }
                //
                // Custom error message and code to be returned immediately if the preflight check fails.
                //
                // Error {
                //         Code = 0
                //         Message = ""
                // }
                //
                // Boolean flag to enable or disable retry functionality for the validation check.
                // Default is false.
                Retry = false
                //
                // The number of times to retry the validation check before considering it a failure.
                // This property is only used when Retry is set to true. Default value is 3 retry attempts.
                RetryTimes = 3
        }

        PostflightCheck {
                Validations {
                        // This section expects boolean validations.
                        // If any validation returns false, an exception will be thrown after executing the action.
                }
                //
                // Custom error message and code to be returned if the postflight check fails.
                //
                // Error {
                //         Code = 0
                //         Message = ""
                // }
                //
                // Boolean flag to enable or disable retry functionality for the validation check.
                // Default is false.
                Retry = false
                //
                // The number of times to retry the validation check before considering it a failure.
                // This property is only used when Retry is set to true. Default value is 3 retry attempts.
                RetryTimes = 3
        }

        // The Expr block is space for evaluating standard PKL expressions. It is primarily used to execute
        // expressions that produce side effects, such as updating resources or triggering actions, but also supports
        // general-purpose evaluation of any valid PKL expression, making it a place for inline logic and
        // scripting within a configuration.
        Expr {
                // memory.setRecord("foo", "bar") // Persistent data
                // memory.clear()
                // session.setRecord("foo", "bar") // Temporary data only for this request
        }

        // Initializes a shell session for this resource.
        //
        // This resource offers the following helper functions:
        //
        // - exec.resource("ResourceID")
        // - exec.stderr("ResourceID")
        // - exec.stdout("ResourceID")
        // - exec.exitCode("ResourceID")
        //
        // To use these in your resource, you can define a local variable as follows:
        //
        // local successExec = exec.exitCode("ResourceID")
        // You can then reference the value using successExec.
        //
        // Module functions like exec.*, llm.*, python.* are called directly.
        // Request functions use "\(request.params("q"))" syntax only when embedding in strings.
        // For direct assignment, use request.params("q") without string interpolation.
        // File reading uses "\(read("file"))" syntax only when embedding in strings.
        Exec {
                Command = """
                # Example: Process the query parameter and get system info
                QUERY="\(request.params("q"))"
                echo "Processing query: $QUERY"
                echo "System info:"
                echo "- Current time: $(date)"
                echo "- System: $(uname -s)"
                echo "- User: $(whoami)"
                echo "- Working directory: $(pwd)"
                
                # You could also process files, call APIs, or run analysis
                # curl -s "https://api.example.com/search?q=$QUERY" | jq .
                # grep -r "$QUERY" /path/to/data/ || echo "No matches found"
                """
                Env {
                        // Environment variables that would be accessible inside the shell
                        ["QUERY_PARAM"] = request.params("q")
                        ["REQUEST_ID"] = request.id()
                        ["USER_AGENT"] = request.header("User-Agent")
                }
                // Timeout duration in seconds. This specifies when to terminate the shell exec.
                TimeoutDuration = 60.s
        }
}
