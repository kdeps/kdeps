{{ .Header }}

ActionID = "pythonResource"
Name = "Python Resource"
Description = "This resource creates a python script session."
Category = ""

Requires {
        // Define the ID of any dependency resource that must be executed before this resource.
        // Example: "httpResource"
        // Example: "llmResource"
}

Items {
        // Items iteration enables a resource to process a sequence of items in a loop, by specifying a set of values
        // to iterate over, which can be accessed using item.current(), item.prev(), and item.next() within the
        // resource's Run block.
        // "data1.csv"
        // "data2.csv"
        // "data3.csv"
        // "user1"
        // "user2"
        // "user3"
}

Run {
        // restrictToHTTPMethods specifies the HTTP methods required for the request.
        // If none are specified, all HTTP methods are permitted. This restriction is only
        // in effect when APIServerMode is enabled. If the request method is not in this list,
        // the action will be skipped.
        RestrictToHTTPMethods {
            "GET"
            // "POST"
            // "PUT"
        }

        // restrictToRoutes specifies the URL paths required for the request.
        // If none are specified, all routes are permitted. This restriction is only
        // in effect when APIServerMode is enabled. If the request path is not in this list,
        // the action will be skipped.
        RestrictToRoutes {
            "/api/v1/whois"
            // "/api/v1/process"
            // "/api/v1/analyze"
        }

        // allowedHeaders specifies the permitted HTTP headers for the request.
        // If none are specified, all headers are allowed. This restriction is only
        // in effect when APIServerMode is enabled.
        AllowedHeaders {
            "X-API-KEY"
            "Authorization"
            "Content-Type"
        }

        // allowedParams specifies the permitted query parameters for the request.
        // If none are specified, all parameters are allowed. This restriction is only
        // in effect when APIServerMode is enabled.
        AllowedParams {
            "script"
            "data"
            "user"
        }

        SkipCondition {
                // Conditions under which the execution of this resource should be skipped.
                // If any evaluated condition returns true, the resource execution will be bypassed.
                // "@(request.params("script"))" == ""
                // "@(request.method)" != "POST"
        }

        PreflightCheck {
                Validations {
                        // This section expects boolean validations.
                        // If any validation returns false, an exception will be thrown before proceeding to the next step.
                        // "@(request.params("script"))" != ""
                        // "@(request.header("Authorization"))" != ""
                }
                //
                // Custom error message and code to be returned immediately if the preflight check fails.
                //
                // Error {
                //         Code = 400
                //         Message = "Script parameter is required"
                // }
        }

        // The expr block is space for evaluating standard PKL expressions. It is primarily used to execute
        // expressions that produce side effects, such as updating resources or triggering actions, but also supports
        // general-purpose evaluation of any valid PKL expression, making it a place for inline logic and
        // scripting within a configuration.
        Expr {
                // "@(memory.setRecord("last_script", "@(request.params("script"))"))" // Store script
                // "@(session.setRecord("python_env", "@(request.params("env"))"))" // Store environment
        }

        // Initiates a Python script session for executing Python code within this resource. Any packages
        // defined in the workflow are accessible here.
        //
        // The Python resource provides the following helper functions:
        //
        // - "@(python.resource("ResourceID"))"
        // - "@(python.stderr("ResourceID"))"
        // - "@(python.stdout("ResourceID"))"
        // - "@(python.exitCode("ResourceID"))"
        //
        // To use these in your resource, you can define a local variable like this:
        //
        // local successExec = "@(python.exitCode("ResourceID"))"
        // You can then reference the value using "@(successExec)".
        //
        // If you need to access a file in your resource, you can use PKL's read("file") API like this:
        // "@(read("file"))".
        //
        // The "@(...)" syntax enables lazy evaluation, ensuring that values are
        // retrieved only after the result is ready.
        //
        // Note: Each resource is restricted to a single dedicated action. Combining multiple
        // actions within the same resource is not allowed.
        Python {
                // Specifies the conda environment in which this Python script will execute, if Anaconda is
                // installed.
                CondaEnvironment = "base"
                // CondaEnvironment = "ml"
                // CondaEnvironment = "data"
                // CondaEnvironment = """
                //         @(request.params("env"))
                // """

                Script =
"""
def main():
    print("Hello, World!")

if __name__ == "__main__":
    main()
"""
                // Script =
                // """
                // import requests
                // import json
                // 
                // def main():
                //     response = requests.get("https://api.example.com/data")
                //     data = response.json()
                //     print(json.dumps(data, indent=2))
                // 
                // if __name__ == "__main__":
                //     main()
                // """
                // Script =
                // """
                // import pandas as pd
                // import numpy as np
                // 
                // def main():
                //     # Read data from request parameter
                //     data = """
                //             @(request.params("data"))
                //     """
                //     df = pd.read_csv(data)
                //     
                //     # Process data
                //     result = df.describe()
                //     print(result.to_json())
                // 
                // if __name__ == "__main__":
                //     main()
                // """
                // Script =
                // """
                // import sys
                // import os
                // 
                // def main():
                //     # Access environment variables
                //     api_key = os.getenv("API_KEY")
                //     user = os.getenv("USER")
                //     
                //     print(f"API Key: {api_key}")
                //     print(f"User: {user}")
                //     
                //     # Process command line arguments
                //     if len(sys.argv) > 1:
                //         print(f"Argument: {sys.argv[1]}")
                // 
                // if __name__ == "__main__":
                //     main()
                // """
                
                Env {
                        // Environment variables that would be accessible inside the shell
                        ["ENVVAR"] = "XYZ"  // Example ENVVAR.
                        // ["PATH"] = "/usr/local/bin:/usr/bin:/bin"
                        // ["PYTHONPATH"] = "/usr/local/lib/python3.9/site-packages"
                        // ["API_KEY"] = """
                        //         @(request.header("X-API-KEY"))
                        // """
                        // ["USER"] = """
                        //         @(request.params("user"))
                        // """
                        // ["DEBUG"] = "true"
                        // ["LOG_LEVEL"] = "info"
                        // ["DATA_DIR"] = "/data"
                        // ["OUTPUT_DIR"] = "/output"
                }
                
                // Timeout duration in seconds. This specifies when to terminate the shell exec.
                TimeoutDuration = 60.s
                // TimeoutDuration = 30.s
                // TimeoutDuration = 300.s
        }
}
